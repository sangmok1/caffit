"use client"

import { useEffect, useState } from "react"
import { Map, MapMarker } from "react-kakao-maps-sdk"

declare global {
  interface Window {
    kakao: any
  }
}

interface CafeLocation {
  id: number
  store_name: string
  branch_name: string
  latitude: number
  longitude: number
  address: string
  store_type?: string
  store?: string
  distance?: number
  phone?: string
  business_hours?: string
}

interface KakaoMapWrapperProps {
  onCafeSelect?: (cafe: CafeLocation | null) => void
}

export default function KakaoMapWrapper({ onCafeSelect }: KakaoMapWrapperProps) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null)
  const [cafes, setCafes] = useState<CafeLocation[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")
  const [locationRequested, setLocationRequested] = useState(false)
  const [map, setMap] = useState<any>(null)
  const [selectedCafeId, setSelectedCafeId] = useState<number | null>(null)
  const [targetCafe, setTargetCafe] = useState<CafeLocation | null>(null)
  const [directions, setDirections] = useState<any>(null)
  const [routeOverlay, setRouteOverlay] = useState<any>(null)
  const [isNavigating, setIsNavigating] = useState(false)
  const [navigationMode, setNavigationMode] = useState<'walking' | 'driving'>('walking')
  const [isFullscreenNav, setIsFullscreenNav] = useState(false)
  const [currentRoute, setCurrentRoute] = useState<any>(null)
  const [currentStep, setCurrentStep] = useState(0)
  const [remainingDistance, setRemainingDistance] = useState(0)
  const [remainingTime, setRemainingTime] = useState(0)
  const [isDestinationReached, setIsDestinationReached] = useState(false)
  const [autoEndTimer, setAutoEndTimer] = useState<NodeJS.Timeout | null>(null)
  const [watchId, setWatchId] = useState<number | null>(null)
  const [isTrackingLocation, setIsTrackingLocation] = useState(false)
  const [userHeading, setUserHeading] = useState<number>(0)
  const [routePath, setRoutePath] = useState<any[]>([])
  const [lastRouteCheck, setLastRouteCheck] = useState<Date>(new Date())
  const [navigationStartTime, setNavigationStartTime] = useState<number | null>(null)

  // Ïπ¥Ïπ¥Ïò§Îßµ API Î°úÎìú ÌôïÏù∏
  useEffect(() => {
    const checkKakaoMaps = () => {
      if (typeof window !== 'undefined' && window.kakao && window.kakao.maps) {
        // Ïù¥ÎØ∏ Î°úÎìúÎêú Í≤ΩÏö∞
        setIsLoaded(true)
      } else if (typeof window !== 'undefined' && window.kakao) {
        // kakao Í∞ùÏ≤¥Îäî ÏûàÏßÄÎßå mapsÍ∞Ä ÏïÑÏßÅ Î°úÎìúÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
        window.kakao.maps.load(() => {
          setIsLoaded(true)
        })
      } else {
        // ÏïÑÏßÅ Ïä§ÌÅ¨Î¶ΩÌä∏Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞, Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑ
        setTimeout(checkKakaoMaps, 100)
      }
    }

    checkKakaoMaps()
  }, [])

  // ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ Ìï®Ïàò
  const requestLocation = () => {
    if (!navigator.geolocation) {
      setUserLocation({ lat: 37.5665, lng: 126.9780 })
      setError("Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÏúÑÏπò ÏÑúÎπÑÏä§Î•º ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏÑúÏö∏Ïó≠ÏúºÎ°ú ÏÑ§Ï†ïÌñàÏäµÎãàÎã§.")
      return
    }

    setLocationRequested(true)
    setError("üìç ÏúÑÏπò Í∂åÌïúÏùÑ ÏöîÏ≤≠ÌïòÍ≥† ÏûàÏäµÎãàÎã§...")
    
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords
        setUserLocation({ lat: latitude, lng: longitude })
        setError("") // ÏóêÎü¨ Î©îÏãúÏßÄ Ï†úÍ±∞
      },
      (error) => {
        console.error("ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§:", error)
        let errorMessage = ""
        
        switch(error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = "ÏúÑÏπò Ï†ëÍ∑ºÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§. Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ïÏóêÏÑú ÏúÑÏπò Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî."
            break
          case error.POSITION_UNAVAILABLE:
            errorMessage = "ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§."
            break
          case error.TIMEOUT:
            errorMessage = "ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§."
            break
          default:
            errorMessage = "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
            break
        }
        
        // Í∏∞Î≥∏Í∞í: ÏÑúÏö∏Ïó≠ Ï¢åÌëú
        setUserLocation({ lat: 37.5665, lng: 126.9780 })
        setError(errorMessage + " ÏÑúÏö∏Ïó≠ÏúºÎ°ú ÏÑ§Ï†ïÌñàÏäµÎãàÎã§.")
      },
      {
        enableHighAccuracy: true, // ÎÜíÏùÄ Ï†ïÌôïÎèÑ ÏöîÏ≤≠
        timeout: 10000, // 10Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
        maximumAge: 300000 // 5Î∂Ñ ÎèôÏïà Ï∫êÏãúÎêú ÏúÑÏπò ÏÇ¨Ïö©
      }
    )
  }

  // ÌéòÏù¥ÏßÄ Î°úÎìúÏãú ÏûêÎèôÏúºÎ°ú ÏúÑÏπò ÏöîÏ≤≠
  useEffect(() => {
    if (!isLoaded) return
    requestLocation()
  }, [isLoaded])

  // Ï£ºÎ≥Ä Ïπ¥Ìéò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ (ÏûÑÏãú Îç∞Ïù¥ÌÑ∞)
  useEffect(() => {
    if (!userLocation) return

    const fetchNearbyCafes = async () => {
      try {
        // Ïã§Ï†ú DBÏóêÏÑú 500m Î∞òÍ≤Ω Ïπ¥Ìéò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const response = await fetch('/api/coffee-locations', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            lat: userLocation.lat,
            lng: userLocation.lng,
            radius: 500 // 500m Î∞òÍ≤Ω
          })
        })

        if (!response.ok) {
          throw new Error(`API Ïò§Î•ò: ${response.status}`)
        }

        const data = await response.json()
        console.log(`500m ÎÇ¥ Ïπ¥Ìéò ${data.count}Í∞ú Î∞úÍ≤¨:`, data.locations)
        
        setCafes(data.locations)
        
      } catch (err) {
        console.error("Ïπ¥Ìéò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§:", err)
        setError("Ïπ¥Ìéò Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§. DB Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
        
        // DB Ïó∞Í≤∞ Ïã§Ìå®Ïãú Îπà Î∞∞Ïó¥Î°ú ÏÑ§Ï†ï
        setCafes([])
      } finally {
        setLoading(false)
      }
    }

    fetchNearbyCafes()
  }, [userLocation])

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏Ïãú ÏúÑÏπò Ï∂îÏ†Å Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      stopLocationTracking()
    }
  }, [])

  // Ïπ¥Ìéò Î∏åÎûúÎìúÎ≥Ñ Î°úÍ≥† ÌÖçÏä§Ìä∏ (Ïù¥Î™®ÏßÄ ÌòïÌÉú)
  const getCafeLogoText = (storeName: string) => {
    console.log('Î∏åÎûúÎìú Î°úÍ≥† ÌÖçÏä§Ìä∏ ÏöîÏ≤≠:', storeName) // ÎîîÎ≤ÑÍπÖÏö©
    switch (storeName) {
      case "Starbucks": return "‚òÖ" // Ïä§ÌÉÄÎ≤ÖÏä§ Î≥Ñ Î™®Ïñë
      case "MEGA": return "M" // Î©îÍ∞ÄÏª§Ìîº M
      case "Gong Cha": return "G" // Í≥µÏ∞® G
      case "Compose": return "C" // Ïª¥Ìè¨Ï¶à C
      case "Paiks": return "P" // ÎπΩÎã§Î∞© P
      case "Hollys": return "H" // Ìï†Î¶¨Ïä§ H
      case "EDIYA": return "E" // Ïù¥ÎîîÏïº E
      default: return "‚òï"
    }
  }

  // Ïπ¥Ìéò Î∏åÎûúÎìúÎ≥Ñ Î°úÍ≥† Ïù¥ÎØ∏ÏßÄ URL
  const getCafeLogoUrl = (storeName: string) => {
    const logoMap: { [key: string]: string } = {
      "Starbucks": "/starbucks-logo.png",
      "MEGA": "/mega-logo.png", 
      "Gong Cha": "/gongcha-logo.png",
      "Compose": "/compose-logo.png",
      "Paiks": "/paiks-logo.png",
      "Hollys": "/hollys-logo.png",
      "EDIYA": "/ediya-logo.png"
    }
    
    return logoMap[storeName] || "/default-cafe-logo.png"
  }

  // Ïπ¥Ìéò Î∏åÎûúÎìúÎ≥Ñ ÎßàÏª§ ÏÉâÏÉÅ (Î°úÍ≥†Í∞Ä ÏóÜÏùÑ Îïå ÎåÄÏ≤¥Ïö©)
  const getMarkerColor = (storeName: string) => {
    console.log('Î∏åÎûúÎìú ÏÉâÏÉÅ ÏöîÏ≤≠:', storeName) // ÎîîÎ≤ÑÍπÖÏö©
    switch (storeName) {
      case "Starbucks": return "#00704A" // Ïä§ÌÉÄÎ≤ÖÏä§ ÏßÑÌïú ÎÖπÏÉâ
      case "MEGA": return "#4A90E2"
      case "Gong Cha": return "#8B0000"
      case "Compose": return "#8B4513"
      case "Paiks": return "#191970"
      case "Hollys": return "#FF4444"
      case "EDIYA": return "#C8A27A"
      default: return "#666666" // Í∏∞Î≥∏ ÌöåÏÉâ
    }
  }

  // ÎÇ¥ ÏúÑÏπòÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
  const goToMyLocation = () => {
    if (map && userLocation) {
      const moveLatLon = new window.kakao.maps.LatLng(userLocation.lat, userLocation.lng)
      map.setCenter(moveLatLon)
      map.setLevel(2) // 500m Î∞òÍ≤ΩÏúºÎ°ú Îçî ÌôïÎåÄ
    } else if (!userLocation) {
      requestLocation() // ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Îã§Ïãú ÏöîÏ≤≠
    }
  }

  // ÏÑ†ÌÉùÎêú Ïπ¥ÌéòÎ°ú Ïù¥Îèô (ÌÜ†Í∏Ä Í∏∞Îä• Ï∂îÍ∞Ä)
  const goToCafe = (cafe: CafeLocation) => {
    if (map) {
      const moveLatLon = new window.kakao.maps.LatLng(cafe.latitude, cafe.longitude)
      map.setCenter(moveLatLon)
      // Ï£ºÎ≥ÄÏπ¥Ìéò ÌÅ¨Í∏∞ Í≥†Ï†ï: ÌôïÎåÄÌïòÏßÄ ÏïäÍ≥† ÌòÑÏû¨ Î†àÎ≤® Ïú†ÏßÄ
    }
    
    // ÎßàÏª§ ÌÜ†Í∏Ä Í∏∞Îä•: Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú Ïπ¥ÌéòÎ•º Îã§Ïãú ÌÅ¥Î¶≠ÌïòÎ©¥ ÏÑ†ÌÉù Ìï¥Ï†ú
    if (selectedCafeId === cafe.id) {
      setSelectedCafeId(null)
      onCafeSelect?.(null)
      console.log('Ïπ¥Ìéò ÏÑ†ÌÉù Ìï¥Ï†úÎê®:', cafe.store_name, cafe.branch_name)
    } else {
      setSelectedCafeId(cafe.id)
      onCafeSelect?.(cafe)
      console.log('Ïπ¥Ìéò ÏÑ†ÌÉùÎê®:', cafe.store_name, cafe.branch_name)
    }
  }

  // Í≤ΩÎ°ú ÏßÄÏö∞Í∏∞ Ìï®Ïàò
  const clearRoute = () => {
    if (routeOverlay && map) {
      routeOverlay.setMap(null)
      setRouteOverlay(null)
    }
    setIsNavigating(false)
    setCurrentRoute(null)
    setCurrentStep(0)
    setRemainingDistance(0)
    setRemainingTime(0)
  }

  // ÏúÑÏπò Ï∂îÏ†Å Î∞è ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï≤òÎ¶¨
  const startLocationTracking = () => {
    if (isTrackingLocation) return

    const options = {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 1000
    }

    const successCallback = (position: GeolocationPosition) => {
      const { latitude, longitude, heading } = position.coords
      const newLocation = { lat: latitude, lng: longitude }
      
      setUserLocation(newLocation)
      
      // GPS headingÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Ïù¥Îèô Î∞©Ìñ• Í≥ÑÏÇ∞
      if (heading !== null && heading !== undefined) {
        setUserHeading(heading)
      } else if (userLocation) {
        const calculatedHeading = calculateBearing(
          userLocation.lat, userLocation.lng, 
          latitude, longitude
        )
        setUserHeading(calculatedHeading)
      }

      // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î™®ÎìúÏóêÏÑúÎäî ÏßÄÎèÑÎ•º ÌôïÎåÄÌïòÍ≥† Ï§ëÏã¨ÏùÑ Í≥†Ï†ï
      if (isNavigating && map) {
        // Î™®ÎìúÎ≥Ñ ÌôïÎåÄ Î†àÎ≤® ÏÑ§Ï†ï
        const navigationLevel = navigationMode === 'driving' ? 2 : 3 // Ï∞®Îüâ: 2, ÎèÑÎ≥¥: 3
        map.setLevel(navigationLevel)
        map.setCenter(new window.kakao.maps.LatLng(latitude, longitude))
        
        // Î∂ÄÎìúÎü¨Ïö¥ Ïù¥Îèô Ìö®Í≥º
        map.panTo(new window.kakao.maps.LatLng(latitude, longitude))
      } else if (map) {
        // ÏùºÎ∞ò Î™®ÎìúÏóêÏÑúÎäî Í∏∞Î≥∏ Î†àÎ≤® Ïú†ÏßÄ
        map.setCenter(new window.kakao.maps.LatLng(latitude, longitude))
      }

      // ÎèÑÏ∞© ÌôïÏù∏ (Ï∞®Îüâ: 30ÎØ∏ÌÑ∞, ÎèÑÎ≥¥: 15ÎØ∏ÌÑ∞ Ïù¥ÎÇ¥)
      // Í∑∏Î¶¨Í≥† ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏù¥ ÏµúÏÜå 30Ï¥à Ïù¥ÏÉÅ Ïã§ÌñâÎêòÏóàÏùÑ ÎïåÎßå ÎèÑÏ∞© ÌåêÎã®
      if (selectedCafeId && cafes.length > 0 && isNavigating) {
        const targetCafe = cafes.find(cafe => cafe.id === selectedCafeId)
        if (targetCafe) {
          const distanceToTarget = getDistance(
            latitude, longitude,
            targetCafe.latitude, targetCafe.longitude
          )
          
          const arrivalThreshold = navigationMode === 'driving' ? 30 : 15
          
          // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë ÌõÑ ÏµúÏÜå 30Ï¥à Í≤ΩÍ≥ºÌñàÎäîÏßÄ ÌôïÏù∏
          const currentTime = Date.now()
          const elapsedTime = navigationStartTime ? currentTime - navigationStartTime : 0
          const hasEnoughTimeElapsed = elapsedTime > 30000 // 30Ï¥à
          
          console.log(`Í±∞Î¶¨ Ï≤¥ÌÅ¨: ${distanceToTarget}m (ÏûÑÍ≥ÑÍ∞í: ${arrivalThreshold}m), Í≤ΩÍ≥ºÏãúÍ∞Ñ: ${Math.round(elapsedTime/1000)}Ï¥à`)
          
          if (distanceToTarget <= arrivalThreshold && hasEnoughTimeElapsed) {
            console.log(`Î™©Ï†ÅÏßÄ ÎèÑÏ∞© Í∞êÏßÄ: ${distanceToTarget}m`)
            handleDestinationReached()
            return
          }
        }
      }

      // Í≤ΩÎ°ú Ïù¥ÌÉà Ï≤¥ÌÅ¨ (5Ï¥àÎßàÎã§, ÎπÑÏö© Ï†àÏïΩ)
      const now = new Date()
      if (now.getTime() - lastRouteCheck.getTime() > 5000) {
        setLastRouteCheck(now)
        if (selectedCafeId && cafes.length > 0) {
          const targetCafe = cafes.find(cafe => cafe.id === selectedCafeId)
          if (targetCafe) {
            checkRouteDeviation(newLocation, targetCafe)
          }
        }
      }
    }

    const errorCallback = (error: GeolocationPositionError) => {
      console.error("ÏúÑÏπò Ï∂îÏ†Å Ïò§Î•ò:", error)
      setError("ÏúÑÏπò Ï∂îÏ†Å Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: " + error.message)
    }

    const watchId = navigator.geolocation.watchPosition(
      successCallback,
      errorCallback,
      options
    )
    
    setWatchId(watchId)
    setIsTrackingLocation(true)
  }

  // Ïã§ÏãúÍ∞Ñ ÏúÑÏπò Ï∂îÏ†Å Ï§ëÏßÄ
  const stopLocationTracking = () => {
    if (watchId !== null) {
      navigator.geolocation.clearWatch(watchId)
      setWatchId(null)
      setIsTrackingLocation(false)
      console.log('Ïã§ÏãúÍ∞Ñ ÏúÑÏπò Ï∂îÏ†Å Ï§ëÏßÄÎê®')
    }
  }

  // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë
  const startNavigation = (route: any) => {
    setIsNavigating(true)
    setNavigationStartTime(Date.now()) // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë ÏãúÍ∞Ñ Í∏∞Î°ù
    setCurrentRoute(route)
    setCurrentStep(0)
    setRemainingDistance(route.summary.distance)
    
    // Ïπ¥Ïπ¥Ïò§ APIÏóêÏÑú Ï†úÍ≥µÌïòÎäî Ï†ïÌôïÌïú ÏòàÏÉÅÏãúÍ∞Ñ ÏÇ¨Ïö© (Ï¥à Îã®ÏúÑÎ•º Î∂Ñ Îã®ÏúÑÎ°ú Î≥ÄÌôò)
    const durationInMinutes = Math.round(route.summary.duration / 60)
    setRemainingTime(durationInMinutes)
    
    // API ÏùëÎãµ Ï†ïÎ≥¥ Î°úÍ∑∏ (ÎîîÎ≤ÑÍπÖÏö©)
    console.log('Ïπ¥Ïπ¥Ïò§ Í∏∏Ï∞æÍ∏∞ ÏùëÎãµ:', {
      distance: route.summary.distance + 'm',
      duration: route.summary.duration + 'Ï¥à',
      durationInMinutes: durationInMinutes + 'Î∂Ñ',
      mode: navigationMode
    })
    
    setIsDestinationReached(false)
    
    // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    if (autoEndTimer) {
      clearTimeout(autoEndTimer)
      setAutoEndTimer(null)
    }
    
    // Ïã§ÏãúÍ∞Ñ ÏúÑÏπò Ï∂îÏ†Å ÏãúÏûë
    startLocationTracking()
    
    // Ï∞®Îüâ Î™®ÎìúÏóêÏÑú Ï†ÑÏ≤¥ÌôîÎ©¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûëÏãú Í≤ΩÎ°úÎèÑ Ìï®Íªò Ï†ÑÎã¨
    if (navigationMode === 'driving' && isFullscreenNav) {
      // Ï†ÑÏ≤¥ÌôîÎ©¥ Î™®ÎìúÏóêÏÑúÎäî ÌòÑÏû¨ ÏúÑÏπò Ï§ëÏã¨ÏúºÎ°ú ÏßÄÎèÑ ÏÑ§Ï†ï
      if (map && userLocation) {
        const moveLatLon = new window.kakao.maps.LatLng(userLocation.lat, userLocation.lng)
        map.setCenter(moveLatLon)
        map.setLevel(1) // ÏÉÅÏÑ∏Ìïú Ï§å Î†àÎ≤®
      }
    }
    
    // ÏùåÏÑ± ÏïàÎÇ¥ ÏãúÏûë
    const modeText = navigationMode === 'driving' ? 'Ï∞®Îüâ' : 'ÎèÑÎ≥¥'
    speakInstruction(`${modeText} ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏùÑ ÏãúÏûëÌï©ÎãàÎã§`)
  }

  // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï§ëÏßÄ
  const stopNavigation = () => {
    setIsNavigating(false)
    setIsFullscreenNav(false)
    setNavigationStartTime(null) // ÏãúÏûë ÏãúÍ∞Ñ Î¶¨ÏÖã
    setCurrentRoute(null)
    setCurrentStep(0)
    setIsDestinationReached(false)
    
    // ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    if (autoEndTimer) {
      clearTimeout(autoEndTimer)
      setAutoEndTimer(null)
    }
    
    // Ïã§ÏãúÍ∞Ñ ÏúÑÏπò Ï∂îÏ†Å Ï§ëÏßÄ
    stopLocationTracking()
    
    clearRoute()
    speakInstruction("ÏïàÎÇ¥Î•º Ï¢ÖÎ£åÌï©ÎãàÎã§")
  }

  // Î™©Ï†ÅÏßÄ ÎèÑÏ∞© Ï≤òÎ¶¨
  const handleDestinationReached = () => {
    setIsDestinationReached(true)
    speakInstruction("Î™©Ï†ÅÏßÄÏóê ÎèÑÏ∞©ÌñàÏäµÎãàÎã§")
    
    // ÏûêÎèô Ï¢ÖÎ£åÎßå ÌïòÍ≥† ÌôàÏúºÎ°ú Ïù¥ÎèôÌïòÏßÄ ÏïäÏùå
    const timer = setTimeout(() => {
      speakInstruction("ÏïàÎÇ¥Î•º Ï¢ÖÎ£åÌï©ÎãàÎã§")
      stopNavigation()
      // ÌôàÏúºÎ°ú ÏûêÎèô Ïù¥Îèô Ï†úÍ±∞ - ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏÑ†ÌÉùÌïòÎèÑÎ°ù Ìï®
    }, 10000)
    
    setAutoEndTimer(timer)
  }

  // ÏùåÏÑ± ÏïàÎÇ¥ Ìï®Ïàò (Ï∞®Îüâ Î™®ÎìúÏóêÏÑúÎßå ÏûëÎèô)
  const speakInstruction = (text: string) => {
    // ÎèÑÎ≥¥ Î™®ÎìúÏóêÏÑúÎäî ÏùåÏÑ± ÏïàÎÇ¥ Ï†úÍ±∞
    if (navigationMode === 'walking') {
      console.log('ÎèÑÎ≥¥ Î™®Îìú: ÏùåÏÑ± ÏïàÎÇ¥ ÎπÑÌôúÏÑ±Ìôî')
      return
    }
    
    // Ï∞®Îüâ Î™®ÎìúÏóêÏÑúÎßå ÏùåÏÑ± ÏïàÎÇ¥
    if (navigationMode === 'driving' && 'speechSynthesis' in window) {
      window.speechSynthesis.cancel() // Ïù¥Ï†Ñ ÏùåÏÑ± Ï§ëÎã®
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = 'ko-KR'
      utterance.rate = 0.9
      utterance.pitch = 1.0
      window.speechSynthesis.speak(utterance)
    }
  }

  // ÌÑ¥Î∞îÏù¥ÌÑ¥ ÏïàÎÇ¥ ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
  const getInstructionText = (route: any, stepIndex: number) => {
    if (!route || !route.sections || stepIndex >= route.sections.length) {
      // Î™©Ï†ÅÏßÄ ÎèÑÏ∞© Ï≤òÎ¶¨
      if (isNavigating && !isDestinationReached) {
        handleDestinationReached()
      }
      return "Î™©Ï†ÅÏßÄÏóê ÎèÑÏ∞©ÌñàÏäµÎãàÎã§"
    }
    
    const section = route.sections[stepIndex]
    const distance = Math.round(section.distance)
    
    // Î™©Ï†ÅÏßÄÍπåÏßÄ 20m Ïù¥ÌïòÎ©¥ ÎèÑÏ∞©ÏúºÎ°ú Í∞ÑÏ£º
    if (distance <= 20 && !isDestinationReached) {
      handleDestinationReached()
      return "Î™©Ï†ÅÏßÄÏóê ÎèÑÏ∞©ÌñàÏäµÎãàÎã§"
    }
    
    // Í±∞Î¶¨Ïóê Îî∞Î•∏ ÏïàÎÇ¥ Î∞©Ïãù Í≤∞Ï†ï
    if (distance > 500) {
      return `ÏßÅÏßÑ ${distance}m Í≥ÑÏÜç Ïù¥ÎèôÌïòÏÑ∏Ïöî`
    } else if (distance > 100) {
      return `${distance}m ÏïûÏóêÏÑú Î™©Ï†ÅÏßÄ Î∞©Ìñ•ÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî`
    } else if (distance > 50) {
      return `${distance}m Ïïû Î™©Ï†ÅÏßÄÍ∞Ä Î≥¥ÏûÖÎãàÎã§`
    } else if (distance > 20) {
      return `${distance}m ÏïûÏóê Î™©Ï†ÅÏßÄÍ∞Ä ÏûàÏäµÎãàÎã§`
    } else {
      return "Î™©Ï†ÅÏßÄÏóê Í±∞Ïùò ÎèÑÏ∞©ÌñàÏäµÎãàÎã§"
    }
  }

  // Îã§Ïùå ÏïàÎÇ¥ ÌÖçÏä§Ìä∏ ÏÉùÏÑ± (Îçî ÌòÑÏã§Ï†ÅÏù∏ Î∞©Ìñ• ÏïàÎÇ¥)
  const getNextInstructionText = (route: any, stepIndex: number) => {
    if (!route || !route.sections || stepIndex + 1 >= route.sections.length) {
      return "Î™©Ï†ÅÏßÄ ÎèÑÏ∞© ÏòàÏ†ï"
    }
    
    const nextSection = route.sections[stepIndex + 1]
    const distance = Math.round(nextSection.distance)
    
    // Îã§ÏñëÌïú Î∞©Ìñ• ÏïàÎÇ¥ Ìå®ÌÑ¥
    const directions = ['Ï¢åÌöåÏ†Ñ', 'Ïö∞ÌöåÏ†Ñ', 'ÏßÅÏßÑ', 'Ïú†ÌÑ¥', 'Ï¢åÏ∏° Î∞©Ìñ•', 'Ïö∞Ï∏° Î∞©Ìñ•']
    const randomDirection = directions[stepIndex % directions.length]
    
    if (distance > 1000) {
      return `${Math.round(distance/1000)}km ÌõÑ ${randomDirection}`
    } else if (distance > 100) {
      return `${distance}m ÌõÑ ${randomDirection}`
    } else {
      return `Í≥ß ${randomDirection}`
    }
  }

  // ÎèÑÎ≥¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë
  const startWalkingNavigation = (cafe: CafeLocation) => {
    console.log('üö∂‚Äç‚ôÄÔ∏è ÎèÑÎ≥¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë:', cafe)
    
    // Í∏∞Ï°¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏù¥ Ïã§Ìñâ Ï§ëÏù¥Î©¥ Î®ºÏ†Ä Ï†ïÎ¶¨
    if (isNavigating) {
      console.log('Í∏∞Ï°¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï†ïÎ¶¨ Ï§ë...')
      stopNavigation()
    }
    
    setNavigationMode('walking')
    setTargetCafe(cafe)
    setSelectedCafeId(cafe.id)
    setIsNavigating(true)
    onCafeSelect?.(cafe)
    
    // ÎèÑÎ≥¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î™®ÎìúÏóêÏÑúÎèÑ ÏßÄÎèÑ ÌôïÎåÄ
    if (map) {
      map.setLevel(3) // ÎèÑÎ≥¥Ïö© ÌôïÎåÄ Î†àÎ≤®
    }
    
    showDirectionsOnMap(cafe, 'walking')
  }

  // Ï∞®Îüâ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë
  const startDrivingNavigation = (cafe: CafeLocation) => {
    console.log('üöó Ï∞®Îüâ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë:', cafe)
    
    // Í∏∞Ï°¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏù¥ Ïã§Ìñâ Ï§ëÏù¥Î©¥ Î®ºÏ†Ä Ï†ïÎ¶¨
    if (isNavigating) {
      console.log('Í∏∞Ï°¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï†ïÎ¶¨ Ï§ë...')
      stopNavigation()
    }
    
    setNavigationMode('driving')
    setTargetCafe(cafe)
    setSelectedCafeId(cafe.id)
    setIsNavigating(true)
    setIsFullscreenNav(true) // Ï∞®Îüâ Î™®ÎìúÏóêÏÑúÎäî Ï†ÑÏ≤¥ÌôîÎ©¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌôúÏÑ±Ìôî
    onCafeSelect?.(cafe)
    
    // ÏûêÎèôÏ∞® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î™®ÎìúÏóêÏÑúÎäî ÏßÄÎèÑÎ•º Îçî ÌôïÎåÄ
    if (map) {
      map.setLevel(2) // Îçî ÌôïÎåÄÎêú Î†àÎ≤®
    }
    
    showDirectionsOnMap(cafe, 'driving')
  }

  // ÏßÄÎèÑ ÏúÑÏóê Ïã§Ï†ú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Í≤ΩÎ°ú ÌëúÏãú
  const showDirectionsOnMap = async (cafe: CafeLocation, mode: 'walking' | 'driving' = 'walking') => {
    if (!userLocation || !map) return

    try {
      // ÏÑúÎ≤Ñ ÏÇ¨Ïù¥Îìú API ÎùºÏö∞Ìä∏Î•º ÌÜµÌï¥ Ïπ¥Ïπ¥Ïò§ API Ìò∏Ï∂ú
      const origin = { x: userLocation.lng, y: userLocation.lat }
      const destination = { x: cafe.longitude, y: cafe.latitude }
      
      // ÏûêÎèôÏ∞® Î™®ÎìúÏóêÏÑúÎäî Ïö∞ÏÑ†ÏàúÏúÑÎ•º ÏãúÍ∞Ñ ÏµúÏ†ÅÌôîÎ°ú ÏÑ§Ï†ï
      const priority = mode === 'driving' ? 'TIME' : 'DISTANCE'
      
      const response = await fetch('/api/kakao-directions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          origin,
          destination,
          priority,
          mode, // ÎèÑÎ≥¥/Ï∞®Îüâ Î™®Îìú Ï†ÑÎã¨
          car_fuel: 'GASOLINE',
          car_hipass: false,
          alternatives: false,
          road_details: false
        })
      })

      if (!response.ok) {
        throw new Error(`Í∏∏Ï∞æÍ∏∞ API Ïò§Î•ò: ${response.status}`)
      }

      const data = await response.json()
      
      if (data.routes && data.routes.length > 0) {
        const route = data.routes[0]
        setCurrentRoute(route)
        setDirections(route)
        
        // Í≤ΩÎ°ú Ï¢åÌëú Ï†ÄÏû•
        const routeCoords: any[] = []
        route.sections.forEach((section: any) => {
          section.roads.forEach((road: any) => {
            road.vertexes.forEach((vertex: number, index: number) => {
              if (index % 2 === 0) {
                const lng = vertex
                const lat = road.vertexes[index + 1]
                routeCoords.push(new window.kakao.maps.LatLng(lat, lng))
              }
            })
          })
        })
        setRoutePath(routeCoords)

        // Í∏∞Ï°¥ Í≤ΩÎ°ú Ï†úÍ±∞
        if (routeOverlay) {
          routeOverlay.setMap(null)
        }

        // ÏÉà Í≤ΩÎ°ú ÌëúÏãú
        const polyline = new window.kakao.maps.Polyline({
          path: routeCoords,
          strokeWeight: mode === 'driving' ? 8 : 5, // ÏûêÎèôÏ∞® Î™®ÎìúÏóêÏÑúÎäî Îçî ÍµµÏùÄ ÏÑ†
          strokeColor: mode === 'driving' ? '#1E88E5' : '#FF5722', // ÏûêÎèôÏ∞®Îäî ÌååÎûÄÏÉâ, ÎèÑÎ≥¥Îäî Ï£ºÌô©ÏÉâ
          strokeOpacity: 0.8,
          strokeStyle: 'solid'
        })

        polyline.setMap(map)
        setRouteOverlay(polyline)

        // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë Ïãú ÌòÑÏû¨ ÏúÑÏπò Ï§ëÏã¨ÏúºÎ°ú ÌôïÎåÄ (Î™®Îì† Î™®Îìú)
        if (mode === 'driving') {
          map.setLevel(2) // Ï∞®Îüâ: Îß§Ïö∞ ÌôïÎåÄ
          map.setCenter(new window.kakao.maps.LatLng(userLocation.lat, userLocation.lng))
        } else {
          // ÎèÑÎ≥¥ Î™®Îìú: Ï∞®ÎüâÎ≥¥Îã§Îäî Îçú ÌôïÎåÄÌïòÏßÄÎßå ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î™®ÎìúÎ°ú ÌôïÎåÄ
          map.setLevel(3) // ÎèÑÎ≥¥: Ï†ÅÎãπÌûà ÌôïÎåÄ
          map.setCenter(new window.kakao.maps.LatLng(userLocation.lat, userLocation.lng))
        }

        // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏãúÏûë
        startNavigation(route)
        
        // ÏúÑÏπò Ï∂îÏ†Å ÏãúÏûë
        startLocationTracking()
        
        console.log(`${mode === 'driving' ? 'ÏûêÎèôÏ∞®' : 'ÎèÑÎ≥¥'} Í∏∏Ï∞æÍ∏∞ ÏÑ±Í≥µ:`, route)
      } else {
        throw new Error("Í≤ΩÎ°úÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
      }
    } catch (error) {
      console.error("Í∏∏Ï∞æÍ∏∞ Ïò§Î•ò:", error)
      setError("Í∏∏Ï∞æÍ∏∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: " + (error as Error).message)
    }
  }

  // Îëê ÏßÄÏ†ê Í∞Ñ Í±∞Î¶¨ Í≥ÑÏÇ∞ (ÎØ∏ÌÑ∞)
  const getDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {
    const R = 6371e3 // ÏßÄÍµ¨ Î∞òÏßÄÎ¶Ñ (ÎØ∏ÌÑ∞)
    const œÜ1 = lat1 * Math.PI / 180
    const œÜ2 = lat2 * Math.PI / 180
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180

    const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
              Math.cos(œÜ1) * Math.cos(œÜ2) *
              Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2)
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))

    return Math.round(R * c)
  }

  // Îëê ÏßÄÏ†ê Í∞Ñ Î∞©Ìñ•Í∞Å Í≥ÑÏÇ∞ (0-360ÎèÑ)
  const calculateBearing = (lat1: number, lng1: number, lat2: number, lng2: number): number => {
    const œÜ1 = lat1 * Math.PI / 180
    const œÜ2 = lat2 * Math.PI / 180
    const ŒîŒª = (lng2 - lng1) * Math.PI / 180

    const y = Math.sin(ŒîŒª) * Math.cos(œÜ2)
    const x = Math.cos(œÜ1) * Math.sin(œÜ2) - Math.sin(œÜ1) * Math.cos(œÜ2) * Math.cos(ŒîŒª)

    const Œ∏ = Math.atan2(y, x)
    return (Œ∏ * 180 / Math.PI + 360) % 360 // 0-360ÎèÑÎ°ú Ï†ïÍ∑úÌôî
  }

  // Í≤ΩÎ°ú Ïù¥ÌÉà Ï≤¥ÌÅ¨ Î∞è Ïû¨Í≥ÑÏÇ∞
  const checkRouteDeviation = async (currentLocation: {lat: number, lng: number}, targetCafe: CafeLocation) => {
    if (!routePath || routePath.length === 0) return

    // ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú Í≤ΩÎ°úÏÉÅ Í∞ÄÏû• Í∞ÄÍπåÏö¥ ÏßÄÏ†êÍπåÏßÄÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞
    let minDistance = Infinity
    let closestPointIndex = 0

    routePath.forEach((point, index) => {
      const distance = getDistance(
        currentLocation.lat, currentLocation.lng,
        point.lat, point.lng
      )
      if (distance < minDistance) {
        minDistance = distance
        closestPointIndex = index
      }
    })

    // Í≤ΩÎ°úÏóêÏÑú 50ÎØ∏ÌÑ∞ Ïù¥ÏÉÅ Î≤óÏñ¥ÎÇ¨ÏúºÎ©¥ Ïû¨Í≥ÑÏÇ∞
    if (minDistance > 50) {
      console.log('Í≤ΩÎ°ú Ïù¥ÌÉà Í∞êÏßÄ! ÏÉàÎ°úÏö¥ Í≤ΩÎ°úÎ•º Í≥ÑÏÇ∞Ìï©ÎãàÎã§...')
      
      if (navigationMode === 'driving' && 'speechSynthesis' in window) {
        speakInstruction('Í≤ΩÎ°úÏóêÏÑú Ïù¥ÌÉàÌñàÏäµÎãàÎã§. ÏÉàÎ°úÏö¥ Í≤ΩÎ°úÎ•º Í≥ÑÏÇ∞Ï§ëÏûÖÎãàÎã§.')
      }
      
      // ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú Î™©Ï†ÅÏßÄÍπåÏßÄ ÏÉà Í≤ΩÎ°ú Í≥ÑÏÇ∞
      await showDirectionsOnMap(targetCafe, navigationMode)
    }
  }

  // Ïπ¥Ïπ¥Ïò§ÏßÄÎèÑ Ïï±ÏúºÎ°ú Ïó∞Í≤∞ (Ï∂úÎ∞úÏßÄ: ÎÇ¥ ÏúÑÏπò, Î™©Ï†ÅÏßÄ: Ïπ¥Ìéò)
  const openKakaoMap = (cafe: CafeLocation) => {
    if (!userLocation) {
      alert('ÌòÑÏû¨ ÏúÑÏπòÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ÏúÑÏπò Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.')
      return
    }

    const startLat = userLocation.lat
    const startLng = userLocation.lng
    const endLat = cafe.latitude
    const endLng = cafe.longitude
    const destName = encodeURIComponent(`${cafe.store} ${cafe.store_name}`)
    
    // Ïπ¥Ïπ¥Ïò§ÏßÄÎèÑ Ïï± URL Ïä§ÌÇ¥ (Í∏∏Ï∞æÍ∏∞)
    const kakaoMapUrl = `kakaomap://route?sp=${startLat},${startLng}&ep=${endLat},${endLng}&by=FOOT`
    
    // Ïõπ Ïπ¥Ïπ¥Ïò§ÏßÄÎèÑ Í∏∏Ï∞æÍ∏∞ URL (Ï∂úÎ∞úÏßÄ: ÌòÑÏû¨ÏúÑÏπò, Î™©Ï†ÅÏßÄ: Ïπ¥Ìéò)
    const webKakaoMapUrl = `https://map.kakao.com/link/to/${destName},${endLat},${endLng}?from=ÌòÑÏû¨ÏúÑÏπò,${startLat},${startLng}`
    
    // Î™®Î∞îÏùºÏóêÏÑúÎäî Ïï± Ïó∞Í≤∞ ÏãúÎèÑ, Ïã§Ìå®ÌïòÎ©¥ ÏõπÏúºÎ°ú
    if (/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
      // Î™®Î∞îÏùº: Ïï±ÏóêÏÑú Í∏∏Ï∞æÍ∏∞ ÏãúÎèÑ
      window.location.href = kakaoMapUrl
      
      // 3Ï¥à ÌõÑ Ïï±Ïù¥ Ïïà Ïó¥Î¶¨Î©¥ ÏõπÏúºÎ°ú Ïù¥Îèô
      setTimeout(() => {
        window.open(webKakaoMapUrl, '_blank')
      }, 3000)
    } else {
      // Îç∞Ïä§ÌÅ¨ÌÜ±: Ïõπ Ïπ¥Ïπ¥Ïò§ÏßÄÎèÑÎ°ú Î∞îÎ°ú Ïù¥Îèô
      window.open(webKakaoMapUrl, '_blank')
    }
  }

  // Í∏∏Ï∞æÍ∏∞ Ìï®Ïàò (ÏßÄÎèÑ ÎÇ¥ÏóêÏÑú Ï≤òÎ¶¨) - Ïù¥Ï†ú ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏùå
  const openDirections = (cafe: CafeLocation, mode: 'walking' | 'driving' = 'walking') => {
    if (mode === 'walking') {
      startWalkingNavigation(cafe)
    } else {
      startDrivingNavigation(cafe)
    }
  }

  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÏóêÏÑúÎßå Î†åÎçîÎßÅ
  if (typeof window === 'undefined') {
    return (
      <div className="flex justify-center items-center h-96 bg-gray-100 rounded-lg">
        <div className="text-center">
          <p className="text-[#8D6E63]">ÏßÄÎèÑ Ï§ÄÎπÑÏ§ë...</p>
        </div>
      </div>
    )
  }

  if (!isLoaded || loading) {
    return (
      <div className="flex justify-center items-center h-96 bg-gray-100 rounded-lg">
        <div className="text-center">
          <div className="flex justify-center items-center space-x-2 mb-3">
            <div className="w-2 h-2 bg-[#C8A27A] rounded-full animate-bounce"></div>
            <div className="w-2 h-2 bg-[#C8A27A] rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
            <div className="w-2 h-2 bg-[#C8A27A] rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
          </div>
          <p className="text-[#8D6E63]">ÏßÄÎèÑ Î°úÎî©Ï§ë...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="w-full">
      {/* Î™©Ï†ÅÏßÄ ÎèÑÏ∞© ÏïåÎ¶º */}
      {isDestinationReached && (
        <div className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center">
          <div className="bg-white rounded-2xl p-8 text-center max-w-sm mx-4 shadow-2xl">
            <div className="text-6xl mb-4">üéØ</div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Î™©Ï†ÅÏßÄ ÎèÑÏ∞©!</h2>
            <p className="text-gray-600 mb-4">
              {autoEndTimer ? '10Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú ÏïàÎÇ¥Í∞Ä Ï¢ÖÎ£åÎê©ÎãàÎã§.' : 'ÏïàÎÇ¥Í∞Ä Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.'}
            </p>
            <div className="flex gap-2">
              <button
                onClick={stopNavigation}
                className="flex-1 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors font-medium"
              >
                üö´ ÏßÄÍ∏à Ï¢ÖÎ£å
              </button>
              <button
                onClick={() => window.location.href = '/find_location'}
                className="flex-1 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
              >
                üó∫Ô∏è ÏßÄÎèÑÎ°ú
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Ï†ÑÏ≤¥ÌôîÎ©¥ Ï∞®Îüâ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
      {isFullscreenNav && isNavigating && navigationMode === 'driving' && !isDestinationReached && (
        <div className="fixed inset-0 bg-black z-50 flex flex-col">
          {/* Ìó§Îçî */}
                      <div className="bg-gradient-to-r from-purple-600 to-blue-600 text-white p-4 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <h1 className="text-xl font-bold">üöó Ïπ¥ÌïèÎÑ§ÎπÑ</h1>
                <div className="text-sm opacity-90">
                  {Math.round(remainingDistance)}m ‚Ä¢ {remainingTime}Î∂Ñ
                </div>
              </div>
            <button
              onClick={() => {
                setIsFullscreenNav(false)
                stopNavigation()
              }}
              className="text-white hover:text-red-300 text-xl"
            >
              ‚úï
            </button>
          </div>
          
          {/* Î©îÏù∏ ÏßÄÎèÑ ÏòÅÏó≠ */}
          <div className="flex-1 relative">
            <Map
              center={userLocation || { lat: 37.5665, lng: 126.9780 }}
              style={{ width: "100%", height: "100%" }}
              level={1} // Îçî ÏÉÅÏÑ∏Ìïú Ï§å Î†àÎ≤®
              onCreate={(navMap) => {
                // Ï†ÑÏ≤¥ÌôîÎ©¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏö© ÏßÄÎèÑÎ•º Î≥ÑÎèÑÎ°ú Í¥ÄÎ¶¨
                setMap(navMap) // Î©îÏù∏ mapÎèÑ ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏó¨ Ïã§ÏãúÍ∞Ñ ÏúÑÏπò Ï∂îÏ†ÅÏóê ÏÇ¨Ïö©
                
                if (userLocation) {
                  const moveLatLon = new window.kakao.maps.LatLng(userLocation.lat, userLocation.lng)
                  navMap.setCenter(moveLatLon)
                }
                
                // Ï†ÑÏ≤¥ÌôîÎ©¥ ÎÑ§ÎπÑÏóêÏÑúÎèÑ Í≤ΩÎ°ú ÌëúÏãú
                if (routeOverlay) {
                  routeOverlay.setMap(navMap)
                }
              }}
            >
              {/* ÏÇ¨Ïö©Ïûê ÌòÑÏû¨ ÏúÑÏπò ÎßàÏª§ - Î™®ÎìúÎ≥Ñ Îã§Î•∏ ÎîîÏûêÏù∏ */}
              {userLocation && (
                <MapMarker
                  position={userLocation}
                image={{
                  src: "data:image/svg+xml;charset=utf-8," + encodeURIComponent(`
                    <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <!-- Ïô∏Î∂Ä Ïõê (GPS Ïã†Ìò∏) -->
                      <circle cx="16" cy="16" r="14" fill="${navigationMode === 'driving' ? '#2196F3' : '#2196F3'}" fill-opacity="0.3" stroke="${navigationMode === 'driving' ? '#2196F3' : '#2196F3'}" stroke-width="1"/>
                      <!-- ÎÇ¥Î∂Ä Ïõê (ÏúÑÏπò) -->
                      <circle cx="16" cy="16" r="8" fill="${navigationMode === 'driving' ? '#2196F3' : '#2196F3'}" stroke="#FFFFFF" stroke-width="2"/>
                      <!-- Ï§ëÏã¨Ï†ê -->
                      <circle cx="16" cy="16" r="3" fill="#FFFFFF"/>
                      <!-- Î∞©Ìñ• ÌëúÏãú -->
                      <g transform="rotate(${userHeading} 16 16)">
                        ${navigationMode === 'driving' ? 
                          `<!-- Ï∞®Îüâ Î™®Ïñë -->
                           <rect x="12" y="8" width="8" height="12" rx="2" fill="#FFFFFF" stroke="#2196F3" stroke-width="1"/>
                           <rect x="13" y="10" width="6" height="3" fill="#2196F3"/>
                           <circle cx="14" cy="18" r="1.5" fill="#2196F3"/>
                           <circle cx="18" cy="18" r="1.5" fill="#2196F3"/>` :
                          `<!-- ÎèÑÎ≥¥ ÌôîÏÇ¥Ìëú -->
                           <path d="M16 6 L20 14 L16 12 L12 14 Z" fill="#FFFFFF" stroke="#2196F3" stroke-width="1"/>`
                        }
                      </g>
                    </svg>
                  `),
                  size: { width: 32, height: 32 }
                }}
              />
              )}
            </Map>
            
            {/* Î©îÏù∏ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏïàÎÇ¥ Ïπ¥Îìú (ÏôºÏ™Ω ÏúÑ) */}
            <div className="absolute top-4 left-4 bg-white rounded-xl shadow-2xl p-4 max-w-sm">
              <div className="flex items-center gap-3 mb-2">
                <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white text-xl">
                  üß≠
                </div>
                <div className="flex-1">
                  <div className="text-sm text-gray-500">Îã§Ïùå ÏïàÎÇ¥</div>
                  <div className="font-bold text-lg text-gray-800">
                    {getInstructionText(currentRoute, currentStep)}
                  </div>
                </div>
              </div>
              
              {/* Í±∞Î¶¨ Ï†ïÎ≥¥ */}
              <div className="flex items-center justify-between text-sm">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <span className="text-gray-600">ÎÇ®ÏùÄ Í±∞Î¶¨</span>
                </div>
                <span className="font-bold text-blue-600">
                  {Math.round(remainingDistance)}m
                </span>
              </div>
              
              <div className="flex items-center justify-between text-sm mt-1">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-gray-600">ÏòàÏÉÅ ÏãúÍ∞Ñ</span>
                </div>
                <span className="font-bold text-green-600">
                  {remainingTime}Î∂Ñ
                </span>
              </div>
              
              {/* Îã§Ïùå Îã®Í≥Ñ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
              {currentRoute && currentStep + 1 < currentRoute.sections?.length && (
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <div className="text-xs text-gray-500 mb-1">Í∑∏ Îã§Ïùå</div>
                  <div className="text-sm text-gray-700">
                    {getNextInstructionText(currentRoute, currentStep)}
                  </div>
                </div>
              )}
            </div>
            
            {/* ÏÜçÎèÑÍ≥Ñ (Ïò§Î•∏Ï™Ω ÏúÑ) */}
            <div className="absolute top-4 right-4 bg-black/80 text-white p-4 rounded-xl">
              <div className="text-center mb-2">
                <div className="text-3xl font-bold">0</div>
                <div className="text-xs opacity-75">km/h</div>
              </div>
              {/* ÏúÑÏπò Ï∂îÏ†Å ÏÉÅÌÉú ÌëúÏãú */}
              <div className="flex items-center justify-center gap-1">
                <div className={`w-2 h-2 rounded-full ${isTrackingLocation ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`}></div>
                <div className="text-xs opacity-75">GPS</div>
              </div>
            </div>
          </div>
          
          {/* ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ìå®ÎÑê */}
          <div className="bg-gradient-to-r from-gray-900 to-gray-800 text-white p-4">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-4 flex-1">
                <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-blue-500 rounded-full flex items-center justify-center text-2xl">
                  üöó
                </div>
                <div className="flex-1">
                  <div className="font-bold text-xl mb-1">
                    {getInstructionText(currentRoute, currentStep)}
                  </div>
                  <div className="text-sm text-gray-300 flex items-center gap-4">
                    <span>üìç {getNextInstructionText(currentRoute, currentStep)}</span>
                    <span>‚è±Ô∏è {remainingTime}Î∂Ñ ÎÇ®Ïùå</span>
                  </div>
                </div>
              </div>
              
              <div className="flex gap-2">
                <button
                  onClick={() => speakInstruction(getInstructionText(currentRoute, currentStep))}
                  className="bg-gradient-to-r from-purple-600 to-blue-600 p-3 rounded-full hover:from-purple-500 hover:to-blue-500 transition-all"
                >
                  üîä
                </button>
                <button
                  onClick={stopNavigation}
                  className="bg-red-600 p-3 rounded-full hover:bg-red-500 transition-all"
                  title="ÏïàÎÇ¥Ï¢ÖÎ£å"
                >
                  üö´
                </button>
              </div>
            </div>
            
            {/* ÏßÑÌñâÎ•†Í≥º Í±∞Î¶¨ Ï†ïÎ≥¥ */}
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>ÏßÑÌñâÎ•†: {Math.round(((currentRoute?.summary?.distance - remainingDistance) / currentRoute?.summary?.distance) * 100)}%</span>
                <span>ÎÇ®ÏùÄ Í±∞Î¶¨: {Math.round(remainingDistance)}m</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-3">
                <div 
                  className="bg-gradient-to-r from-purple-500 to-blue-500 h-3 rounded-full transition-all duration-500 shadow-lg"
                  style={{ 
                    width: `${Math.round(((currentRoute?.summary?.distance - remainingDistance) / currentRoute?.summary?.distance) * 100)}%` 
                  }}
                ></div>
              </div>
            </div>
          </div>
        </div>
      )}

      {error && (
        <div className="mb-4 p-3 bg-yellow-100 border border-yellow-400 text-yellow-700 rounded flex justify-between items-center">
          <span>{error}</span>
          {locationRequested && error.includes("Í±∞Î∂Ä") && (
            <button
              onClick={requestLocation}
              className="ml-3 px-3 py-1 bg-[#C8A27A] text-white rounded text-sm hover:bg-[#B08E6A] transition-colors"
            >
              Îã§Ïãú ÏãúÎèÑ
            </button>
          )}
        </div>
      )}
      
      {!userLocation && !error.includes("ÏöîÏ≤≠ÌïòÍ≥†") && (
        <div className="mb-4 p-4 bg-blue-50 border border-blue-200 text-blue-700 rounded text-center">
          <div className="mb-3">
            <div className="text-2xl mb-2">üìç</div>
            <h3 className="font-medium mb-1">ÎÇ¥ ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï¥Ïöî!</h3>
            <p className="text-sm text-blue-600">Ï£ºÎ≥Ä Ïπ¥ÌéòÎ•º Ï∞æÍ∏∞ ÏúÑÌï¥ ÌòÑÏû¨ ÏúÑÏπòÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.</p>
          </div>
          <button
            onClick={requestLocation}
            className="px-4 py-2 bg-[#C8A27A] text-white rounded hover:bg-[#B08E6A] transition-colors font-medium"
          >
            ÏúÑÏπò Ï†ïÎ≥¥ ÌóàÏö©ÌïòÍ∏∞
          </button>
        </div>
      )}
      
      <div 
        className="relative"
        style={{ 
          touchAction: "none", // ÏßÄÎèÑ ÏòÅÏó≠ÏóêÏÑú Î∏åÎùºÏö∞Ï†Ä Í∏∞Î≥∏ ÌÑ∞Ïπò ÎèôÏûë Î∞©ÏßÄ
          userSelect: "none" // ÌÖçÏä§Ìä∏ ÏÑ†ÌÉù Î∞©ÏßÄÎ°ú ÎìúÎûòÍ∑∏ Í∞úÏÑ†
        }}
      >
        {/* ÏßÄÎèÑ Ïª®Ìä∏Î°§ Î≤ÑÌäºÎì§ */}
        <div className="absolute top-3 right-3 z-10 flex flex-col gap-2">
          {/* ÎÇ¥ ÏúÑÏπòÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞ Î≤ÑÌäº */}
          <button
            onClick={goToMyLocation}
            className="p-2 bg-white border border-gray-300 rounded-lg shadow-md hover:bg-gray-50 transition-colors"
            title="ÎÇ¥ ÏúÑÏπòÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞"
          >
            <svg className="w-5 h-5 text-[#C8A27A]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </button>
          
          {/* Í≤ΩÎ°ú/ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï†úÏñ¥ Î≤ÑÌäº */}
          {routeOverlay && !isNavigating && (
            <button
              onClick={clearRoute}
              className="p-2 bg-white border border-gray-300 rounded-lg shadow-md hover:bg-gray-50 transition-colors"
              title="Í≤ΩÎ°ú ÏßÄÏö∞Í∏∞"
            >
              <svg className="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          )}
          
          {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï§ëÏßÄ Î≤ÑÌäº */}
          {isNavigating && (
            <button
              onClick={stopNavigation}
              className="p-2 bg-red-500 text-white rounded-lg shadow-md hover:bg-red-600 transition-colors"
              title="ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï§ëÏßÄ"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z" />
              </svg>
            </button>
          )}
        </div>

        <Map
          center={userLocation || { lat: 37.5665, lng: 126.9780 }} // Í∏∞Î≥∏Í∞í: ÏÑúÏö∏Ïó≠
          style={{ 
            width: "100%", 
            // Í∏∏Ï∞æÍ∏∞ Ï§ëÏùº Îïå ÏßÄÎèÑ ÌÅ¨Í∏∞Î•º ÌôîÎ©¥ Ï†àÎ∞òÏúºÎ°ú ÌôïÎåÄ
            height: isNavigating ? 
              (window.innerWidth < 768 ? "50vh" : "50vh") : // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï§ë: ÌôîÎ©¥ Ï†àÎ∞ò
              (window.innerWidth < 768 ? "250px" : "350px"), // ÏùºÎ∞ò: Í∏∞Ï°¥ ÌÅ¨Í∏∞
            touchAction: "auto" // ÌÑ∞Ïπò/ÎßàÏö∞Ïä§ Ïù¥Î≤§Ìä∏ ÌóàÏö©
          }}
          level={isNavigating ? 1 : 2} // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï§ëÏùº Îïå Îçî ÌôïÎåÄ
          maxLevel={4} // Ï§åÏïÑÏõÉ Îçî Ï†úÌïú
          draggable={true} // ÏßÄÎèÑ ÎìúÎûòÍ∑∏ Í∞ÄÎä•
          scrollwheel={true} // ÎßàÏö∞Ïä§ Ìú† Ï§å Í∞ÄÎä•
          disableDoubleClick={false} // ÎçîÎ∏îÌÅ¥Î¶≠ Ï§å Í∞ÄÎä•
          keyboardShortcuts={true} // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ ÌóàÏö©
          onCreate={(map) => {
            setMap(map)
            // ÏõπÏóêÏÑú ÎìúÎûòÍ∑∏ ÏòµÏÖò Í∞ïÏ†ú ÌôúÏÑ±Ìôî
            try {
              map.setDraggable(true)
              map.setZoomable(true)
              
              // Ï∂îÍ∞Ä ÏòµÏÖò ÏÑ§Ï†ï (Ïπ¥Ïπ¥Ïò§Îßµ ÎÑ§Ïù¥Ìã∞Î∏å API)
              if (window.kakao && window.kakao.maps) {
                // ÏßÅÏ†ë Î©îÏÑúÎìú Ìò∏Ï∂úÎ°ú ÏïàÏ†ÑÌïòÍ≤å ÏÑ§Ï†ï
                if (typeof (map as any).setDraggable === 'function') {
                  (map as any).setDraggable(true)
                }
                if (typeof (map as any).setScrollwheel === 'function') {
                  (map as any).setScrollwheel(true)
                }
                if (typeof (map as any).setKeyboardShortcuts === 'function') {
                  (map as any).setKeyboardShortcuts(true)
                }
              }
              
              console.log('ÏßÄÎèÑ ÎìúÎûòÍ∑∏ ÏòµÏÖòÏù¥ ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.')
            } catch (error) {
              console.error('ÏßÄÎèÑ ÏòµÏÖò ÏÑ§Ï†ï Ïò§Î•ò:', error)
            }
          }}
        >
          {/* ÏÇ¨Ïö©Ïûê ÌòÑÏû¨ ÏúÑÏπò ÎßàÏª§ - Î™®ÎìúÎ≥Ñ Îã§Î•∏ ÎîîÏûêÏù∏ */}
          {userLocation && (
            <MapMarker
              position={userLocation}
            image={{
              src: "data:image/svg+xml;charset=utf-8," + encodeURIComponent(`
                <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <!-- Ïô∏Î∂Ä Ïõê (GPS Ïã†Ìò∏) -->
                  <circle cx="16" cy="16" r="14" fill="${navigationMode === 'driving' ? '#2196F3' : '#2196F3'}" fill-opacity="0.3" stroke="${navigationMode === 'driving' ? '#2196F3' : '#2196F3'}" stroke-width="1"/>
                  <!-- ÎÇ¥Î∂Ä Ïõê (ÏúÑÏπò) -->
                  <circle cx="16" cy="16" r="8" fill="${navigationMode === 'driving' ? '#2196F3' : '#2196F3'}" stroke="#FFFFFF" stroke-width="2"/>
                  <!-- Ï§ëÏã¨Ï†ê -->
                  <circle cx="16" cy="16" r="3" fill="#FFFFFF"/>
                  <!-- Î∞©Ìñ• ÌëúÏãú -->
                  <g transform="rotate(${userHeading} 16 16)">
                    ${navigationMode === 'driving' ? 
                      `<!-- Ï∞®Îüâ Î™®Ïñë -->
                       <rect x="12" y="8" width="8" height="12" rx="2" fill="#FFFFFF" stroke="#2196F3" stroke-width="1"/>
                       <rect x="13" y="10" width="6" height="3" fill="#2196F3"/>
                       <circle cx="14" cy="18" r="1.5" fill="#2196F3"/>
                       <circle cx="18" cy="18" r="1.5" fill="#2196F3"/>` :
                      `<!-- ÎèÑÎ≥¥ ÌôîÏÇ¥Ìëú -->
                       <path d="M16 6 L20 14 L16 12 L12 14 Z" fill="#FFFFFF" stroke="#2196F3" stroke-width="1"/>`
                    }
                  </g>
                </svg>
              `),
              size: { width: 32, height: 32 }
            }}
          />
          )}
          
          {/* Ïπ¥Ìéò ÎßàÏª§Îì§ - Í∞Å Î∏åÎûúÎìú Î°úÍ≥† Ìè¨Ìï® */}
          {cafes.map((cafe) => {
            const isSelected = selectedCafeId === cafe.id
            const opacity = 1.0 // ÏßÄÎèÑÏóêÏÑúÎäî Î™®Îì† ÎßàÏª§Î•º ÏÑ†Î™ÖÌïòÍ≤å ÌëúÏãú
            const markerSize = isSelected ? { width: 32, height: 40 } : { width: 28, height: 36 }
            const circleRadius = isSelected ? 14 : 12
            const strokeWidth = isSelected ? 3 : 1
            const strokeColor = isSelected ? "#C8A27A" : "#E0E0E0"
            
            return (
              <MapMarker
                key={cafe.id}
                position={{ lat: cafe.latitude, lng: cafe.longitude }}
                title={`${cafe.store} ${cafe.store_name}`}
                onClick={() => goToCafe(cafe)}
                image={{
                  src: "data:image/svg+xml;charset=utf-8," + encodeURIComponent(`
                    <svg width="${markerSize.width}" height="${markerSize.height}" viewBox="0 0 ${markerSize.width} ${markerSize.height}" fill="none" xmlns="http://www.w3.org/2000/svg" opacity="${opacity}">
                      <!-- Ìù∞ÏÉâ ÏõêÌòï Î∞∞Í≤Ω -->
                      <circle cx="${markerSize.width/2}" cy="${circleRadius + 2}" r="${circleRadius}" fill="#FFFFFF" stroke="${strokeColor}" stroke-width="${strokeWidth}"/>
                      <!-- ÌôîÏÇ¥Ìëú Íº¨Î¶¨ -->
                      <path d="M${markerSize.width/2} ${circleRadius * 2 + 2} L${markerSize.width/2} ${markerSize.height - 4} L${markerSize.width/2} ${circleRadius * 2 + 2} Z" fill="#FFFFFF" stroke="${strokeColor}" stroke-width="1"/>
                      <path d="M${markerSize.width/2} ${circleRadius * 2 + 2} L${markerSize.width/2 - 4} ${markerSize.height - 2} L${markerSize.width/2 + 4} ${markerSize.height - 2} Z" fill="#FFFFFF" stroke="${strokeColor}" stroke-width="1"/>
                      <!-- Ïπ¥Ìéò Î∏åÎûúÎìú Î°úÍ≥† ÌÖçÏä§Ìä∏ -->
                      <text x="${markerSize.width/2}" y="${circleRadius + 6}" text-anchor="middle" fill="${getMarkerColor(cafe.store || cafe.store_name)}" font-size="${isSelected ? 18 : 16}" font-weight="bold" font-family="Arial, sans-serif">${getCafeLogoText(cafe.store || cafe.store_name)}</text>
                    </svg>
                  `),
                  size: markerSize,
                  options: {
                    offset: { x: markerSize.width/2, y: markerSize.height }
                  }
                }}
              />
                         )
           })}
          </Map>
      </div>
      
      {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï†ïÎ≥¥ Ìå®ÎÑê (ÎèÑÎ≥¥ Î™®Îìú Ï†ÑÏö©) */}
      {isNavigating && currentRoute && navigationMode === 'walking' && !isFullscreenNav && (
        <div className="mt-4 bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-lg p-4 shadow-lg">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-bold flex items-center gap-2">
              üö∂‚Äç‚ôÄÔ∏è ÎèÑÎ≥¥ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
              {/* GPS ÏÉÅÌÉú ÌëúÏãú */}
              <div className="flex items-center gap-1 ml-2">
                <div className={`w-2 h-2 rounded-full ${isTrackingLocation ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`}></div>
                <span className="text-xs opacity-75">GPS</span>
              </div>
            </h3>
            <button
              onClick={stopNavigation}
              className="text-white hover:text-red-200 transition-colors"
            >
              ‚úï
            </button>
          </div>
          
          <div className="space-y-3">
            {/* ÌòÑÏû¨ ÏïàÎÇ¥ */}
            <div className="bg-white/20 rounded-lg p-4">
              <div className="text-2xl font-bold mb-2 flex items-center gap-2">
                üß≠ {getInstructionText(currentRoute, currentStep)}
              </div>
              <div className="text-sm opacity-90 mb-2">
                {getNextInstructionText(currentRoute, currentStep)}
              </div>
              <div className="flex items-center justify-between text-sm">
                <span>ÎÇ®ÏùÄ Í±∞Î¶¨: {Math.round(remainingDistance)}m</span>
                <span>ÏòàÏÉÅ ÏãúÍ∞Ñ: {remainingTime}Î∂Ñ</span>
              </div>
            </div>
            
            {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïª®Ìä∏Î°§ */}
            <div className="grid grid-cols-3 gap-2">
              <button
                onClick={() => speakInstruction(getInstructionText(currentRoute, currentStep))}
                className="bg-white/20 px-3 py-2 rounded-lg hover:bg-white/30 transition-colors text-sm font-medium"
              >
                üîä Îã§Ïãú Îì£Í∏∞
              </button>
              <button
                onClick={stopNavigation}
                className="bg-red-500/80 px-3 py-2 rounded-lg hover:bg-red-500 transition-colors text-sm font-medium"
              >
                üö´ ÏïàÎÇ¥Ï¢ÖÎ£å
              </button>
              <button
                onClick={() => window.location.href = '/find_location'}
                className="bg-gray-500/80 px-3 py-2 rounded-lg hover:bg-gray-500 transition-colors text-sm font-medium"
              >
                üó∫Ô∏è ÏßÄÎèÑÎ°ú
              </button>
            </div>
            

          </div>
        </div>
      )}
      
      {/* Ïπ¥Ìéò Î™©Î°ù */}
      <div className="mt-4">
        <h3 className="text-lg font-medium text-[#5D4037] mb-3">
          Ï£ºÎ≥Ä Ïπ¥Ìéò ({cafes.length}Í∞ú)
        </h3>
        <div className="space-y-2 max-h-48 overflow-y-auto">
          {cafes
            .sort((a, b) => {
              // ÏÑ†ÌÉùÎêú Ïπ¥ÌéòÎ•º Îß® ÏúÑÎ°ú Ï†ïÎ†¨
              if (selectedCafeId === a.id) return -1
              if (selectedCafeId === b.id) return 1
              return 0
            })
            .map((cafe) => (
            <div
              key={cafe.id}
              className={`p-3 border rounded-lg cursor-pointer transition-all duration-300 ${
                selectedCafeId === cafe.id 
                  ? 'bg-[#F8F6F2] border-[#C8A27A] shadow-lg opacity-100' 
                  : selectedCafeId !== null 
                    ? 'bg-white border-[#E6D9CC] hover:bg-[#F8F6F2] opacity-50' 
                    : 'bg-white border-[#E6D9CC] hover:bg-[#F8F6F2] opacity-100'
              }`}
              onClick={() => goToCafe(cafe)}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0 mr-3">
                  <div className="flex items-center gap-2 mb-1">
                    <img 
                      src={getCafeLogoUrl(cafe.store || cafe.store_name)}
                      alt={cafe.store_name}
                      className="w-4 h-4 flex-shrink-0 object-contain"
                      onError={(e) => {
                        // Î°úÍ≥† Î°úÎìú Ïã§Ìå®Ïãú ÏÉâÏÉÅ ÏõêÏúºÎ°ú ÎåÄÏ≤¥
                        const target = e.target as HTMLImageElement
                        target.style.display = 'none'
                        const parent = target.parentElement
                        if (parent) {
                          const colorDiv = document.createElement('div')
                          colorDiv.className = 'w-3 h-3 rounded-full flex-shrink-0'
                          colorDiv.style.backgroundColor = getMarkerColor(cafe.store_name)
                          parent.insertBefore(colorDiv, target)
                        }
                      }}
                    />
                    <span className="font-medium text-[#5D4037] break-words">
                      {cafe.store} {cafe.store_name}
                      {cafe.store_type && (
                        <span className="ml-1 text-xs bg-gray-100 text-gray-600 px-1 rounded">
                          {cafe.store_type}
                        </span>
                      )}
                    </span>
                  </div>
                  <p className="text-sm text-[#8D6E63] mb-1 line-clamp-1">{cafe.address}</p>
                  {cafe.distance !== undefined && (
                    <p className="text-xs text-[#C8A27A] font-medium mb-1">
                      üìç ÏßÅÏÑ†Í±∞Î¶¨: {cafe.distance}m ({Math.round(cafe.distance / 80)}Î∂Ñ)
                    </p>
                  )}
                  {cafe.business_hours && (
                    <p className="text-xs text-[#B08E6A]">
                      üïí ÏòÅÏóÖÏãúÍ∞Ñ: {cafe.business_hours}
                    </p>
                  )}
                </div>
                
                <div className="flex-shrink-0">
                  <div className="text-xs text-gray-500 font-medium mb-2 text-center">Í∏∏Ï∞æÍ∏∞</div>
                  {/* ÎèÑÎ≥¥/Ï∞®Îüâ Î≤ÑÌäºÏùÑ Ìïú Ï§ÑÎ°ú */}
                  <div className="flex gap-2 mb-3">
                    <button 
                      className="px-3 py-1.5 bg-orange-500 text-white text-xs rounded hover:bg-orange-600 transition-colors whitespace-nowrap"
                      onClick={(e) => {
                        e.stopPropagation()
                        startWalkingNavigation(cafe)
                      }}
                    >
                      üö∂‚Äç‚ôÄÔ∏è ÎèÑÎ≥¥
                    </button>
                    <button 
                      className="px-3 py-1.5 bg-blue-500 text-white text-xs rounded hover:bg-blue-600 transition-colors whitespace-nowrap"
                      onClick={(e) => {
                        e.stopPropagation()
                        startDrivingNavigation(cafe)
                      }}
                    >
                      üöó Ï∞®Îüâ
                    </button>
                  </div>
                  {/* Ïπ¥Ïπ¥Ïò§ÏßÄÎèÑ Ïó∞Í≤∞ Î≤ÑÌäº */}
                  <button 
                    className="w-full px-3 py-2 bg-yellow-400 text-black text-xs rounded hover:bg-yellow-500 transition-colors font-medium"
                    onClick={(e) => {
                      e.stopPropagation()
                      openKakaoMap(cafe)
                    }}
                  >
                    üó∫Ô∏è Ïπ¥Ïπ¥Ïò§ÏßÄÎèÑ
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
} 